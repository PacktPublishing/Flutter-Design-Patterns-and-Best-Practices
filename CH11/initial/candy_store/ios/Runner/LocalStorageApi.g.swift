// Autogenerated from Pigeon (v18.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct FaveProduct {
  var id: String

  static func fromList(_ list: [Any?]) -> FaveProduct? {
    let id = list[0] as! String

    return FaveProduct(
      id: id
    )
  }
  func toList() -> [Any?] {
    return [
      id
    ]
  }
}
private class LocalStorageApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 128:
      return FaveProduct.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class LocalStorageApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? FaveProduct {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class LocalStorageApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return LocalStorageApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return LocalStorageApiCodecWriter(data: data)
  }
}

class LocalStorageApiCodec: FlutterStandardMessageCodec {
  static let shared = LocalStorageApiCodec(readerWriter: LocalStorageApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol LocalStorageApi {
  func addFave(id: String) throws
  func removeFave(id: String) throws
  func isFave(id: String) throws -> Bool
  func getFaves() throws -> [FaveProduct]
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LocalStorageApiSetup {
  /// The codec used by LocalStorageApi.
  static var codec: FlutterStandardMessageCodec { LocalStorageApiCodec.shared }
  /// Sets up an instance of `LocalStorageApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: LocalStorageApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let addFaveChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.candy_store.LocalStorageApi.addFave\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      addFaveChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.addFave(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      addFaveChannel.setMessageHandler(nil)
    }
    let removeFaveChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.candy_store.LocalStorageApi.removeFave\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      removeFaveChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          try api.removeFave(id: idArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      removeFaveChannel.setMessageHandler(nil)
    }
    let isFaveChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.candy_store.LocalStorageApi.isFave\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isFaveChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let idArg = args[0] as! String
        do {
          let result = try api.isFave(id: idArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isFaveChannel.setMessageHandler(nil)
    }
    let getFavesChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.candy_store.LocalStorageApi.getFaves\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      getFavesChannel.setMessageHandler { _, reply in
        do {
          let result = try api.getFaves()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      getFavesChannel.setMessageHandler(nil)
    }
  }
}
